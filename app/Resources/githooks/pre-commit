#!/bin/zsh

# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# Redirect output to stderr.
exec 1>&2

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

# PHP debug methods to look for in staged files
PHP_DEBUG_METHODS=("var_dump" "die" "print_r" "var_export")
ANY_ERROR_FOUND=0

# will dump grep results for $1 - php method occurences if found
php_debug_method() {
    RES=`grep -n --color "\b${1}(" $2`
    if [ ! -z "$RES" ]; then
        ANY_ERROR_FOUND=1
        echo -e "Found \e[1;33m$1\e[0m in file: \e[1;31m$2\e[0m"
        echo "grep results follows:"
        echo ""
        for LINE in $RES
        do
            echo -e "    \e[1;31m$(echo $LINE | awk -F: '{ print $1 }')\e[0m:$(echo $LINE | awk -F : '{print substr($0, index($0, $2))}')"
        done
        echo ""
    fi
}

# looks over staged files
for STAGED_FILE in `git diff-index --cached --name-only $against`
do
    EXT=`echo "$STAGED_FILE" | awk -F . '{print $NF}'`
    if [[ "$EXT" == "php" ]]; then # all php files
        # check debug methods
        for METHOD in $PHP_DEBUG_METHODS
        do
            if [ -f "$STAGED_FILE" ]; then
                php_debug_method $METHOD $STAGED_FILE
            fi
        done
    fi
done

# if any error was recorded, exit as failure
if [ $ANY_ERROR_FOUND -gt 0 ]; then
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --
